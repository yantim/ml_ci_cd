name: CI Pipeline

on:
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  # Quality Gates Job
  quality-gates:
    runs-on: ubuntu-latest
    name: Quality Gates (Linting, Formatting, Security)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Ruff (linting and formatting)
      run: |
        echo "Running Ruff linting..."
        ruff check src tests --output-format=github
        echo "Running Ruff formatting check..."
        ruff format src tests --check
    
    - name: Run Black (code formatting)
      run: |
        echo "Running Black formatting check..."
        black --check --diff src tests
    
    - name: Run isort (import sorting)
      run: |
        echo "Running isort import sorting check..."
        isort --check-only --diff src tests
    
    - name: Run mypy (type checking)
      run: |
        echo "Running mypy type checking..."
        mypy src --config-file mypy.ini
      continue-on-error: true  # Allow to pass while we add type hints
    
    - name: Run Bandit (security scanning)
      run: |
        echo "Running Bandit security scan..."
        bandit -r src -f json -o bandit-report.json || true
        bandit -r src -f txt
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  # Unit Tests Job
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests with Coverage
    needs: quality-gates
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run unit tests with coverage
      run: |
        echo "Running unit tests with â‰¥80% coverage requirement..."
        pytest tests/ -v \
          --cov=src \
          --cov-report=term-missing \
          --cov-report=xml:coverage-${{ matrix.python-version }}.xml \
          --cov-report=html:htmlcov-${{ matrix.python-version }} \
          --cov-fail-under=80 \
          -m "not integration and not docker"
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          coverage-${{ matrix.python-version }}.xml
          htmlcov-${{ matrix.python-version }}/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: coverage-${{ matrix.python-version }}.xml
        fail_ci_if_error: false

  # Integration Tests Job
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests (non-Docker)
      run: |
        echo "Running integration tests..."
        pytest tests/test_integration.py -v \
          -m "integration and not docker" \
          --tb=short
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image for testing
      run: |
        echo "Building Docker image for integration tests..."
        docker build -f docker/Dockerfile -t ml-api-test:latest .
    
    - name: Run Docker integration tests
      run: |
        echo "Running Docker-based integration tests..."
        pytest tests/test_integration.py -v \
          -m "docker" \
          --tb=short
      continue-on-error: true  # Docker tests may be flaky in CI

  # Security and Compliance
  security-scan:
    runs-on: ubuntu-latest
    name: Security & Compliance Scan
    needs: quality-gates
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Test Docker Image
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build & Test
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        echo "Building production Docker image..."
        docker build -f docker/Dockerfile -t ml-ci-cd:latest .
    
    - name: Test Docker image
      run: |
        echo "Testing Docker image health..."
        # Start container in background
        docker run -d --name test-container -p 8000:8000 \
          -e MODEL_URI="fake://model/uri" \
          ml-ci-cd:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test API docs
        curl -f http://localhost:8000/docs || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container
    
    - name: Save Docker image
      run: |
        docker save ml-ci-cd:latest | gzip > ml-ci-cd-image.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: ml-ci-cd-image.tar.gz
        retention-days: 7
